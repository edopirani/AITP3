// // ------------------------------------------
// // USERS
// // ------------------------------------------
// model User {
//   id        String   @id @default(uuid()) @db.Uuid
//   email     String   @unique
//   username  String   @unique
//   password  String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   profiles  Profile[]
//   trips     Trip[]
// }

// // ------------------------------------------
// // PROFILES (Fully Normalized)
// // ------------------------------------------
// model Profile {
//   id        String   @id @default(uuid()) @db.Uuid
//   userId    String   @db.Uuid
//   name      String

//   // Normalized references
//   profileTypeId        String? @db.Uuid
//   ageRangeId           String? @db.Uuid
//   genderId             String? @db.Uuid
//   relationshipStatusId String? @db.Uuid

//   // Each preference is a foreign key referencing a separate Option model
//   fitnessPreferenceId      String? @db.Uuid
//   pacePreferenceId         String? @db.Uuid
//   soloTravelerPreferenceId String? @db.Uuid
//   schedulePreferenceId     String? @db.Uuid
//   comfortPreferenceId      String? @db.Uuid
//   nightlifePreferenceId    String? @db.Uuid

//   // Relations to lookup tables
//   user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
//   profileType        ProfileType?        @relation(fields: [profileTypeId], references: [id], onDelete: SetNull)
//   ageRange           AgeRange?           @relation(fields: [ageRangeId], references: [id], onDelete: SetNull)
//   gender             Gender?             @relation(fields: [genderId], references: [id], onDelete: SetNull)
//   relationshipStatus RelationshipStatus? @relation(fields: [relationshipStatusId], references: [id], onDelete: SetNull)

//   // Relations to Option models (each uses a unique @relation name)
//   fitnessPreference      FitnessOption?      @relation("FitnessRef", fields: [fitnessPreferenceId], references: [id], onDelete: SetNull)
//   pacePreference         PaceOption?         @relation("PaceRef", fields: [pacePreferenceId], references: [id], onDelete: SetNull)
//   soloTravelerPreference SoloTravelerOption? @relation("SoloRef", fields: [soloTravelerPreferenceId], references: [id], onDelete: SetNull)
//   schedulePreference     ScheduleOption?     @relation("ScheduleRef", fields: [schedulePreferenceId], references: [id], onDelete: SetNull)
//   comfortPreference      ComfortOption?      @relation("ComfortRef", fields: [comfortPreferenceId], references: [id], onDelete: SetNull)
//   nightlifePreference    NightlifeOption?    @relation("NightlifeRef", fields: [nightlifePreferenceId], references: [id], onDelete: SetNull)

//   // Other relations
//   languages         ProfileLanguage[]
//   movingPreferences ProfileMovingPreference[]
//   stayingPreferences ProfileStayingPreference[]
//   interests         ProfileInterest[]
// }


// model ProfilePreference {
//   id             String  @id @default(uuid()) @db.Uuid
//   profileId      String  @db.Uuid
//   preferenceType String  // "Fitness", "Pace", "SoloTraveler", etc.
//   optionId       String  @db.Uuid  // Links to the relevant option table

//   profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

//   @@unique([profileId, preferenceType])  // Each profile can only have one option per preference type
// }


// // ------------------------------------------
// // PROFILE LOOKUP TABLES
// // ------------------------------------------
// model ProfileType {
//   id   String @id @default(uuid()) @db.Uuid
//   name String @unique

//   profiles Profile[]
// }

// model AgeRange {
//   id   String @id @default(uuid()) @db.Uuid
//   name String @unique

//   profiles Profile[]
// }

// model Gender {
//   id   String @id @default(uuid()) @db.Uuid
//   name String @unique

//   profiles Profile[]
// }

// model RelationshipStatus {
//   id   String @id @default(uuid()) @db.Uuid
//   name String @unique

//   profiles Profile[]
// }

// // ------------------------------------------
// // LANGUAGES (Normalized)
// // ------------------------------------------
// model Language {
//   id   String @id @default(uuid()) @db.Uuid
//   name String @unique

//   profileLanguages ProfileLanguage[]
// }

// model ProfileLanguage {
//   id          String @id @default(uuid()) @db.Uuid
//   profileId   String @db.Uuid
//   languageId  String @db.Uuid
//   proficiency Int    @default(2) // 1=Basic, 2=Conversational, 3=Fluent

//   profile  Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
//   language Language @relation(fields: [languageId], references: [id], onDelete: Cascade)

//   @@unique([profileId, languageId])
// }

// // ------------------------------------------
// // MOVING PREFERENCES (Normalized)
// // ------------------------------------------
// model MovingPreference {
//   id   String @id @default(uuid()) @db.Uuid
//   type String @unique

//   profileMovingPreferences ProfileMovingPreference[]
// }

// model ProfileMovingPreference {
//   id          String @id @default(uuid()) @db.Uuid
//   profileId   String @db.Uuid
//   movingPrefId String @db.Uuid

//   profile          Profile          @relation(fields: [profileId], references: [id], onDelete: Cascade)
//   movingPreference MovingPreference @relation(fields: [movingPrefId], references: [id], onDelete: Cascade)

//   @@unique([profileId, movingPrefId])
// }

// // ------------------------------------------
// // STAYING PREFERENCES (Normalized)
// // ------------------------------------------
// model StayingPreference {
//   id   String @id @default(uuid()) @db.Uuid
//   type String @unique

//   profileStayingPreferences ProfileStayingPreference[]
// }

// model ProfileStayingPreference {
//   id           String @id @default(uuid()) @db.Uuid
//   profileId    String @db.Uuid
//   stayingPrefId String @db.Uuid

//   profile           Profile           @relation(fields: [profileId], references: [id], onDelete: Cascade)
//   stayingPreference StayingPreference @relation(fields: [stayingPrefId], references: [id], onDelete: Cascade)

//   @@unique([profileId, stayingPrefId])
// }

// // ------------------------------------------
// // INTERESTS (Normalized)
// // ------------------------------------------
// model Interest {
//   id        String @id @default(uuid()) @db.Uuid
//   name      String @unique
//   category  String? // e.g. "Sports", "Food", etc.

//   profileInterests ProfileInterest[]
// }

// model ProfileInterest {
//   id         String @id @default(uuid()) @db.Uuid
//   profileId  String @db.Uuid
//   interestId String @db.Uuid

//   profile  Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
//   interest Interest @relation(fields: [interestId], references: [id], onDelete: Cascade)

//   @@unique([profileId, interestId])
// }

// // ------------------------------------------
// // SPECIFIC PREFERENCE OPTIONS 
// // Each has a unique relation name back to Profile
// // ------------------------------------------
// model FitnessOption {
//   id    String @id @default(uuid()) @db.Uuid
//   name  String @unique // e.g. "Sedentary", "Moderately Active", "Very Active"
//   value Int    @unique // e.g. 1, 2, 3

//   profiles Profile[] @relation("FitnessRef")
// }

// model PaceOption {
//   id    String @id @default(uuid()) @db.Uuid
//   name  String @unique
//   value Int    @unique

//   profiles Profile[] @relation("PaceRef")
// }

// model SoloTravelerOption {
//   id    String @id @default(uuid()) @db.Uuid
//   name  String @unique
//   value Int    @unique

//   profiles Profile[] @relation("SoloRef")
// }

// model ScheduleOption {
//   id    String @id @default(uuid()) @db.Uuid
//   name  String @unique
//   value Int    @unique

//   profiles Profile[] @relation("ScheduleRef")
// }

// model ComfortOption {
//   id    String @id @default(uuid()) @db.Uuid
//   name  String @unique
//   value Int    @unique

//   profiles Profile[] @relation("ComfortRef")
// }

// model NightlifeOption {
//   id    String @id @default(uuid()) @db.Uuid
//   name  String @unique
//   value Int    @unique

//   profiles Profile[] @relation("NightlifeRef")
// }

// // ------------------------------------------
// // TRIPS
// // ------------------------------------------
// model Trip {
//   id        String   @id @default(uuid()) @db.Uuid
//   userId    String   @db.Uuid
//   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   name      String?
//   startDate DateTime?
//   endDate   DateTime?

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }
