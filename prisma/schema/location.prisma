// ------------------------------------------
// ALL LOCATIONS
// ------------------------------------------

model LocationCategory {
  id    String @id @default(uuid()) @db.Uuid
  name  String @unique
  level Int

  // ✅ Back-relation to Location
  locations Location[]

  // ✅ Relation for multiple Google Place Types
  googleMappings LocationCategoryMapping[]
}

model LocationCategoryMapping {
  id              String @id @default(uuid()) @db.Uuid
  googleType      String @unique // "locality", "administrative_area_level_1", etc.
  
  // ✅ Each Google Type links to ONE category
  categoryId      String @db.Uuid
  category        LocationCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}


model Location {
  id            String  @id @default(uuid()) @db.Uuid
  name          String
  shortName     String? // Shorter name (e.g., "Colosseum")
  categoryId    String  @db.Uuid // ✅ Still links to LocationCategory
  googleType    String // "locality", "administrative_area_level_1", etc.
  parentId      String? @db.Uuid
  latitude      Float?
  longitude     Float?
  googlePlaceId String  @unique // ✅ Ensure this is unique!

  // ✅ Relations
  category LocationCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  parent   Location?        @relation("LocationParentChild", fields: [parentId], references: [id], onDelete: SetNull)
  children Location[]       @relation("LocationParentChild")

  trips          TripLocation[]
  itineraryItems ItineraryItem[]
  bases          TripBase[]
}
